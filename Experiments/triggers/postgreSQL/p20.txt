# Encode the program:
# author|SELECT author.* FROM author, writes WHERE author.aid = writes.aid AND author.aid = 100920;
# writes|SELECT writes.* FROM author, writes WHERE author.aid = writes.aid AND author.aid = 100920;
# Result: treated like end semantics


CREATE OR REPLACE FUNCTION update_organization_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            DELETE FROM organization WHERE organization.oid = 16045;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_organization_20
    AFTER DELETE ON author
    FOR EACH ROW EXECUTE PROCEDURE update_organization_view_20();

CREATE OR REPLACE FUNCTION update_delta_organization_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_organization values (old.oid, old.name);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_organization_20
    AFTER DELETE ON organization
    FOR EACH ROW EXECUTE PROCEDURE update_delta_organization_view_20();	

CREATE OR REPLACE FUNCTION update_author_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM author USING delta_organization WHERE author.oid = delta_organization.oid;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_author_20
    AFTER INSERT ON delta_organization
    FOR EACH ROW EXECUTE PROCEDURE update_author_view_20();

CREATE OR REPLACE FUNCTION update_delta_author_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_author values (old.aid, old.name, old.oid);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_author_20
    AFTER DELETE ON author
    FOR EACH ROW EXECUTE PROCEDURE update_delta_author_view_20();

CREATE OR REPLACE FUNCTION update_writes_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM writes USING delta_author WHERE delta_author.aid = writes.aid;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_writes_20
    AFTER INSERT ON delta_author
    FOR EACH ROW EXECUTE PROCEDURE update_writes_view_20();

CREATE OR REPLACE FUNCTION update_delta_writes_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_writes values (old.aid, old.pid);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_writes_20
    AFTER DELETE ON writes
    FOR EACH ROW EXECUTE PROCEDURE update_delta_writes_view_20();
	


CREATE OR REPLACE FUNCTION update_publication_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM publication USING delta_writes WHERE publication.pid = delta_writes.pid;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_publication_20
    AFTER INSERT ON delta_writes
    FOR EACH ROW EXECUTE PROCEDURE update_publication_view_20();	

CREATE OR REPLACE FUNCTION update_delta_publication_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_publication values (old.pid, old.title, old.year);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_publication_20
    AFTER DELETE ON publication
    FOR EACH ROW EXECUTE PROCEDURE update_delta_publication_view_20();
	

CREATE OR REPLACE FUNCTION update_cite_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM cite USING delta_publication WHERE delta_publication.pid = cite.citing;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_cite_20
    AFTER INSERT ON delta_publication
    FOR EACH ROW EXECUTE PROCEDURE update_cite_view_20();

CREATE OR REPLACE FUNCTION update_delta_cite_view_20() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_cite values (old.citing, old.cited);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_cite_20
    AFTER DELETE ON cite
    FOR EACH ROW EXECUTE PROCEDURE update_delta_cite_view_20();
	