# Encode the program:
# author|SELECT author.* FROM author, writes WHERE author.aid = writes.aid AND author.aid = 100920;
# writes|SELECT writes.* FROM author, writes WHERE author.aid = writes.aid AND author.aid = 100920;
# publication|SELECT publication.* FROM publication, delta_writes, author WHERE publication.pid = delta_writes.pid AND delta_writes.aid = author.aid;
# publication|SELECT publication.* FROM publication, writes, delta_author WHERE publication.pid = writes.pid AND writes.aid = delta_author.aid;
# Result: treated like step semantics! deleted all writes tuples and all publication tuples with the appropriate pid.


CREATE OR REPLACE FUNCTION update_author_view_8() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            DELETE FROM author USING writes WHERE author.aid = writes.aid author.aid = 100920;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_author_8
    AFTER DELETE ON author
    FOR EACH ROW EXECUTE PROCEDURE update_author_view_8();

CREATE OR REPLACE FUNCTION update_delta_author_view_8() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_author values (old.aid, old.name, old.oid);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_author_8
    AFTER DELETE ON author
    FOR EACH ROW EXECUTE PROCEDURE update_delta_author_view_8();

CREATE OR REPLACE FUNCTION update_writes_view_8() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            DELETE FROM writes USING author WHERE author.aid = writes.aid AND author.aid = 100920;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_writes_8
    AFTER DELETE ON author
    FOR EACH ROW EXECUTE PROCEDURE update_writes_view_8();

CREATE OR REPLACE FUNCTION update_delta_writes_view_8() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_writes values (old.aid, old.pid);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_writes_8
    AFTER DELETE ON writes
    FOR EACH ROW EXECUTE PROCEDURE update_delta_writes_view_8();

CREATE OR REPLACE FUNCTION update_publication_view_8_1() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM publication USING delta_writes, author WHERE publication.pid = delta_writes.pid AND delta_writes.aid = author.aid;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_publication_8_1
    AFTER INSERT ON delta_writes
    FOR EACH ROW EXECUTE PROCEDURE update_publication_view_8_1();	

CREATE OR REPLACE FUNCTION update_publication_view_8_2() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'INSERT') THEN
            DELETE FROM publication USING writes, delta_author WHERE publication.pid = writes.pid AND writes.aid = delta_author.aid;
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_publication_8_2
    AFTER INSERT ON delta_author
    FOR EACH ROW EXECUTE PROCEDURE update_publication_view_8_2();

CREATE OR REPLACE FUNCTION update_delta_publication_view_8() RETURNS TRIGGER AS $$
    BEGIN
        IF (TG_OP = 'DELETE') THEN
            INSERT INTO delta_publication values (old.pid, old.title, old.year);
			RETURN NEW;
        END IF;
		RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_delta_publication_8
    AFTER DELETE ON publication
    FOR EACH ROW EXECUTE PROCEDURE update_delta_publication_view_8();
